{"version":3,"sources":["ao_logo.svg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","details","name","gender","className","src","alt","CardList","cards","map","key","SearchBox","placeholder","handleChange","type","onChange","players","App","state","originalPlayers","filterPlayers","bind","event","value","target","length","this","setState","filter","toLowerCase","includes","a","axios","results","data","fetch","logo","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,qC,kUCG9BC,G,kBAAO,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACbC,EAAiBD,EAAjBC,KAAMC,EAAWF,EAAXE,OACd,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,SACb,yBAAKC,IAAI,WAAWC,IAAKJ,KAE3B,yBAAKE,UAAU,QAAQF,GACvB,yBAAKE,UAAU,UAAUD,MCPlBI,EAAW,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACzB,OACE,6BAASJ,UAAU,aAChBI,EAAMC,KAAI,SAACR,GAAD,OACT,kBAAC,EAAD,CAAMS,IAAKT,EAAQC,KAAMD,QAASA,SCL7BU,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACvC,OACE,6BACE,2BAAOC,KAAK,SAASF,YAAaA,EAAaG,SAAUF,OCCzDG,EAAU,CACd,CAAEd,KAAM,gBACR,CAAEA,KAAM,iBACR,CAAEA,KAAM,mBAgEKe,E,kDA5Db,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXF,UACAG,gBAAiB,IAGnB,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBART,E,0DAWAC,GAAQ,IAERC,EACRD,EADFE,OAAUD,MAGRA,EAAME,OAAS,EACjBC,KAAKC,UAAS,YACZ,MAAO,CACLX,QAF2B,EAAdA,QAEIY,QAAO,YACtB,OADoC,EAAX1B,KACb2B,cAAcC,SAASP,UAKzCG,KAAKC,UAAS,YAAkC,EAA/BX,QACf,MAAO,CACLA,QAF4C,EAAtBG,sB,0CAQT,IAAD,QACP,uCAAG,8BAAAY,EAAA,sEAGFC,IAAM,iCAHJ,gBAEFC,EAFE,EAEVC,KAAQD,QAEV,EAAKN,UAAS,iBAAO,CAAEX,QAASiB,EAASd,gBAAiBc,MAJ9C,2CAAH,qDAOXE,K,+BAIA,OACE,yBAAK/B,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAK+B,IAAMhC,UAAU,WAAWE,IAAI,SACzC,kBAAC,EAAD,CACEO,aAAca,KAAKN,cACnBR,YAAY,mBAEd,kBAAC,EAAD,CAAUJ,MAAOkB,KAAKR,MAAMF,gB,GAtDpBqB,IAAMC,WCDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d0ee3038.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ao_logo.9405910b.svg\";","import React from 'react'\nimport './card.style.css'\n\nexport const Card = ({ details }) => {\n  const { name, gender } = details\n  return (\n    <div className=\"card-item\">\n      <div className=\"image\">\n        <img src=\"/fed.jpg\" alt={name} />\n      </div>\n      <div className=\"name\">{name}</div>\n      <div className=\"gender\">{gender}</div>\n    </div>\n  )\n}\n","import React from 'react'\nimport './card-list.styles.css'\nimport { Card } from '../card/card.component'\n\nexport const CardList = ({ cards }) => {\n  return (\n    <section className=\"card-list\">\n      {cards.map((details) => (\n        <Card key={details.name} details={details} />\n      ))}\n    </section>\n  )\n}\n","import React from 'react'\nimport './search-box.style.css'\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n  return (\n    <div>\n      <input type=\"search\" placeholder={placeholder} onChange={handleChange} />\n    </div>\n  )\n}\n","import React from 'react'\nimport logo from './ao_logo.svg'\nimport axios from 'axios'\nimport './App.css'\nimport { CardList } from './components/card-list/card-list.component'\nimport { SearchBox } from './components/search-box/search-box.component'\n\nconst players = [\n  { name: 'Rafael Nadal' },\n  { name: 'Roger Federer' },\n  { name: 'Novak Djokovic' },\n]\n\nclass App extends React.Component {\n  constructor() {\n    super()\n\n    this.state = {\n      players,\n      originalPlayers: [],\n    }\n\n    this.filterPlayers = this.filterPlayers.bind(this)\n  }\n\n  filterPlayers(event) {\n    const {\n      target: { value },\n    } = event\n\n    if (value.length > 1) {\n      this.setState(({ players }) => {\n        return {\n          players: players.filter(({ name }) => {\n            return name.toLowerCase().includes(value)\n          }),\n        }\n      })\n    } else {\n      this.setState(({ players, originalPlayers }) => {\n        return {\n          players: originalPlayers,\n        }\n      })\n    }\n  }\n\n  componentDidMount() {\n    const fetch = async () => {\n      const {\n        data: { results },\n      } = await axios('https://swapi.dev/api/people/')\n      this.setState(() => ({ players: results, originalPlayers: results }))\n    }\n\n    fetch()\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <SearchBox\n            handleChange={this.filterPlayers}\n            placeholder=\"search players\"\n          />\n          <CardList cards={this.state.players} />\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}